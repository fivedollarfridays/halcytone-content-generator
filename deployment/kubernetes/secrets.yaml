# Kubernetes Secrets for Halcytone Content Generator
# IMPORTANT: This is a template. Never commit actual secrets to version control.
# Use kubectl create secret or external secret management (e.g., Sealed Secrets, External Secrets Operator)

---
apiVersion: v1
kind: Secret
metadata:
  name: content-generator-secrets
  namespace: halcytone
  labels:
    app: content-generator
type: Opaque
stringData:
  # CRM API credentials
  crm-api-key: "YOUR_CRM_API_KEY_HERE"

  # Platform API credentials
  platform-api-key: "YOUR_PLATFORM_API_KEY_HERE"

  # Google Cloud credentials (base64 encoded JSON)
  google-credentials: |
    {
      "type": "service_account",
      "project_id": "your-project",
      "private_key_id": "key-id",
      "private_key": "-----BEGIN PRIVATE KEY-----\nYOUR_PRIVATE_KEY\n-----END PRIVATE KEY-----\n",
      "client_email": "service-account@project.iam.gserviceaccount.com",
      "client_id": "client-id",
      "auth_uri": "https://accounts.google.com/o/oauth2/auth",
      "token_uri": "https://oauth2.googleapis.com/token",
      "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
      "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/service-account"
    }

  # Notion API credentials
  notion-api-key: "YOUR_NOTION_API_KEY_HERE"
  notion-database-id: "YOUR_NOTION_DATABASE_ID_HERE"

  # OpenAI API credentials
  openai-api-key: "YOUR_OPENAI_API_KEY_HERE"

  # Database credentials (if using PostgreSQL)
  postgres-password: "YOUR_POSTGRES_PASSWORD_HERE"
  postgres-connection-string: "postgresql://user:password@postgres-service:5432/content_db"

  # Redis credentials (if using authentication)
  redis-password: ""

  # JWT signing key (if using authentication)
  jwt-secret-key: "YOUR_JWT_SECRET_KEY_HERE"

---
# TLS Secret (managed by cert-manager)
# This is automatically created by cert-manager, but here's the structure
apiVersion: v1
kind: Secret
metadata:
  name: halcytone-tls-secret
  namespace: halcytone
type: kubernetes.io/tls
data:
  tls.crt: <base64-encoded-certificate>
  tls.key: <base64-encoded-private-key>

---
# Example using kubectl to create secrets:
# kubectl create secret generic content-generator-secrets \
#   --from-literal=crm-api-key=YOUR_KEY \
#   --from-literal=platform-api-key=YOUR_KEY \
#   --from-file=google-credentials=./google-creds.json \
#   --from-literal=notion-api-key=YOUR_KEY \
#   --from-literal=openai-api-key=YOUR_KEY \
#   --namespace=halcytone

---
# Example using Sealed Secrets (recommended for GitOps):
# kubeseal --format=yaml < secrets.yaml > sealed-secrets.yaml
# Then commit sealed-secrets.yaml to version control

---
# Example using External Secrets Operator:
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: content-generator-external-secrets
  namespace: halcytone
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: aws-secrets-manager
    kind: SecretStore
  target:
    name: content-generator-secrets
    creationPolicy: Owner
  data:
  - secretKey: crm-api-key
    remoteRef:
      key: halcytone/production/crm-api-key
  - secretKey: platform-api-key
    remoteRef:
      key: halcytone/production/platform-api-key
  - secretKey: google-credentials
    remoteRef:
      key: halcytone/production/google-credentials
  - secretKey: notion-api-key
    remoteRef:
      key: halcytone/production/notion-api-key
  - secretKey: openai-api-key
    remoteRef:
      key: halcytone/production/openai-api-key
