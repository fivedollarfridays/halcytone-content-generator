# Horizontal Pod Autoscaler for Toombos
# Scales based on CPU, memory, and custom metrics

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: content-generator-hpa
  namespace: halcytone
  labels:
    app: content-generator
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: content-generator
  minReplicas: 3
  maxReplicas: 10
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Min
    scaleUp:
      stabilizationWindowSeconds: 0
      policies:
      - type: Percent
        value: 100
        periodSeconds: 30
      - type: Pods
        value: 4
        periodSeconds: 30
      selectPolicy: Max
  metrics:
  # CPU-based scaling
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  # Memory-based scaling
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  # Custom metrics (requires metrics-server and Prometheus adapter)
  - type: Pods
    pods:
      metric:
        name: http_requests_per_second
      target:
        type: AverageValue
        averageValue: "100"
  - type: Pods
    pods:
      metric:
        name: response_time_p95
      target:
        type: AverageValue
        averageValue: "5000"  # 5 seconds in milliseconds

---
# Vertical Pod Autoscaler (optional, requires VPA)
apiVersion: autoscaling.k8s.io/v1
kind: VerticalPodAutoscaler
metadata:
  name: content-generator-vpa
  namespace: halcytone
spec:
  targetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: content-generator
  updatePolicy:
    updateMode: "Auto"
  resourcePolicy:
    containerPolicies:
    - containerName: content-generator
      minAllowed:
        cpu: 500m
        memory: 512Mi
      maxAllowed:
        cpu: 4000m
        memory: 4Gi
      controlledResources:
      - cpu
      - memory

---
# Cluster Autoscaler Configuration (annotation on deployment)
# This is handled at the node group level in cloud providers
# Example for AWS EKS:
# aws autoscaling set-desired-capacity \
#   --auto-scaling-group-name halcytone-node-group \
#   --desired-capacity 3

---
# KEDA ScaledObject for event-driven autoscaling (optional)
# Requires KEDA installation
apiVersion: keda.sh/v1alpha1
kind: ScaledObject
metadata:
  name: content-generator-keda
  namespace: halcytone
spec:
  scaleTargetRef:
    name: content-generator
  pollingInterval: 30
  cooldownPeriod: 300
  minReplicaCount: 3
  maxReplicaCount: 15
  advanced:
    horizontalPodAutoscalerConfig:
      behavior:
        scaleDown:
          stabilizationWindowSeconds: 300
          policies:
          - type: Percent
            value: 50
            periodSeconds: 60
        scaleUp:
          stabilizationWindowSeconds: 0
          policies:
          - type: Percent
            value: 100
            periodSeconds: 30
  triggers:
  # Scale based on Redis queue length (if using message queues)
  - type: redis
    metadata:
      address: redis-service:6379
      listName: content_generation_queue
      listLength: "10"
  # Scale based on HTTP requests (Prometheus)
  - type: prometheus
    metadata:
      serverAddress: http://prometheus:9090
      metricName: http_requests_rate
      threshold: "100"
      query: sum(rate(http_requests_total{app="content-generator"}[1m]))
  # Scale based on CPU (fallback)
  - type: cpu
    metadata:
      type: Utilization
      value: "70"
