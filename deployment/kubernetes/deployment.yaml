# Kubernetes Deployment for Halcytone Content Generator
apiVersion: apps/v1
kind: Deployment
metadata:
  name: content-generator
  namespace: halcytone
  labels:
    app: content-generator
    version: v1
    component: api
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: content-generator
  template:
    metadata:
      labels:
        app: content-generator
        version: v1
        component: api
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: content-generator
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000

      # Init container for database migrations (if needed)
      initContainers:
      - name: wait-for-redis
        image: busybox:1.28
        command: ['sh', '-c', 'until nc -z redis-service 6379; do echo waiting for redis; sleep 2; done;']

      containers:
      - name: content-generator
        image: halcytone/content-generator:latest
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8000
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP

        env:
        - name: APP_NAME
          value: "Halcytone Content Generator"
        - name: ENVIRONMENT
          value: "production"
        - name: DEBUG
          value: "false"
        - name: LOG_LEVEL
          value: "INFO"
        - name: PORT
          value: "8000"
        - name: WORKERS
          value: "4"

        # Service URLs
        - name: CRM_BASE_URL
          valueFrom:
            configMapKeyRef:
              name: content-generator-config
              key: crm-base-url
        - name: PLATFORM_BASE_URL
          valueFrom:
            configMapKeyRef:
              name: content-generator-config
              key: platform-base-url
        - name: REDIS_URL
          value: "redis://redis-service:6379/0"

        # Secrets
        - name: CRM_API_KEY
          valueFrom:
            secretKeyRef:
              name: content-generator-secrets
              key: crm-api-key
        - name: PLATFORM_API_KEY
          valueFrom:
            secretKeyRef:
              name: content-generator-secrets
              key: platform-api-key
        - name: GOOGLE_CREDENTIALS_JSON
          valueFrom:
            secretKeyRef:
              name: content-generator-secrets
              key: google-credentials
        - name: NOTION_API_KEY
          valueFrom:
            secretKeyRef:
              name: content-generator-secrets
              key: notion-api-key
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: content-generator-secrets
              key: openai-api-key

        # Performance settings
        - name: MAX_CONCURRENT_REQUESTS
          value: "100"
        - name: REQUEST_TIMEOUT
          value: "120"
        - name: ENABLE_METRICS
          value: "true"
        - name: ENABLE_TRACING
          value: "true"

        # Health checks
        livenessProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3

        readinessProbe:
          httpGet:
            path: /ready
            port: http
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 2

        startupProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 0
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 30

        # Resource management
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "2000m"

        # Volume mounts
        volumeMounts:
        - name: logs
          mountPath: /app/logs
        - name: cache
          mountPath: /app/cache
        - name: data
          mountPath: /app/data
          readOnly: true

        # Security context
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL

      volumes:
      - name: logs
        emptyDir: {}
      - name: cache
        emptyDir: {}
      - name: data
        configMap:
          name: content-generator-data

      # Pod disruption budget for high availability
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - content-generator
              topologyKey: kubernetes.io/hostname

      # Graceful shutdown
      terminationGracePeriodSeconds: 60

      # DNS policy
      dnsPolicy: ClusterFirst
      restartPolicy: Always

---
# Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: content-generator
  namespace: halcytone
  labels:
    app: content-generator

---
# Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: content-generator-pdb
  namespace: halcytone
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: content-generator
