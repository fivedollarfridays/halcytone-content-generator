version: '3.8'

services:
  content-generator:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: toombos-backend
    ports:
      - "8000:8000"
    environment:
      # Application settings
      - APP_NAME=Toombos Backend
      - ENVIRONMENT=development
      - DEBUG=true
      - LOG_LEVEL=INFO

      # API URLs
      - CRM_BASE_URL=${CRM_BASE_URL:-http://crm-service:8001}
      - PLATFORM_BASE_URL=${PLATFORM_BASE_URL:-http://platform-api:8002}

      # API Keys (use secrets in production)
      - CRM_API_KEY=${CRM_API_KEY:-dev-crm-key}
      - PLATFORM_API_KEY=${PLATFORM_API_KEY:-dev-platform-key}
      - GOOGLE_DOCS_API_KEY=${GOOGLE_DOCS_API_KEY:-}
      - NOTION_API_KEY=${NOTION_API_KEY:-}
      - NOTION_DATABASE_ID=${NOTION_DATABASE_ID:-}

      # Email settings
      - EMAIL_BATCH_SIZE=50
      - EMAIL_RATE_LIMIT=100

      # Circuit breaker settings
      - CIRCUIT_BREAKER_FAILURE_THRESHOLD=5
      - CIRCUIT_BREAKER_RECOVERY_TIMEOUT=60
      - MAX_RETRIES=3
      - RETRY_MAX_WAIT=60

      # Redis cache (optional)
      - REDIS_URL=${REDIS_URL:-redis://redis:6379/0}

      # Database (optional, for future persistence)
      - DATABASE_URL=${DATABASE_URL:-postgresql://user:pass@postgres:5432/content_db}

    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    networks:
      - halcytone-network
    depends_on:
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  redis:
    image: redis:7-alpine
    container_name: toombos-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - halcytone-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: PostgreSQL for persistence
  postgres:
    image: postgres:15-alpine
    container_name: toombos-postgres
    environment:
      - POSTGRES_USER=contentuser
      - POSTGRES_PASSWORD=contentpass
      - POSTGRES_DB=content_db
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - halcytone-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U contentuser"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: toombos-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - halcytone-network
    restart: unless-stopped

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: toombos-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - halcytone-network
    depends_on:
      - prometheus
    restart: unless-stopped

  # Optional: Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: toombos-jaeger
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "6831:6831/udp"  # Thrift compact protocol
      - "6832:6832/udp"  # Thrift binary protocol
      - "5778:5778"      # Serve configs
      - "16686:16686"    # Jaeger UI
      - "14268:14268"    # Accept jaeger.thrift
      - "14250:14250"    # Accept gRPC
      - "4317:4317"      # OTLP gRPC
      - "4318:4318"      # OTLP HTTP
    networks:
      - halcytone-network
    restart: unless-stopped

networks:
  halcytone-network:
    driver: bridge

volumes:
  redis-data:
  postgres-data:
  prometheus-data:
  grafana-data: